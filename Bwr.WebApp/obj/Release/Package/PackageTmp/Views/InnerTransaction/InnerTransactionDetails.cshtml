@model BWR.Application.Dtos.Transaction.InnerTransaction.InnerTransactionUpdateDto
@using BWR.Application.Dtos.Client
@using BWR.Application.Dtos.Company
@{
    /**/

    ViewBag.Title = "EditInnerTransaction";
    Layout = "~/Views/Shared/_BlankPageLayout.cshtml";
}

@section  Style{
    <!--Data Table Style-->
    <link href="~/Content/assets/global/plugins/datatables/datatables.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap-rtl.css" rel="stylesheet"
          type="text/css" />
    <!--End Data Table Style-->
    <!--Begin Css Jquery Confirm-->
    <link href="~/Content/Jquery-Confirm/Jquery-confrim-css.css" rel="stylesheet" />
    <!--END Css Jquery Confirm-->
}

    <div class="row">
        <div class="col-lg-4">
            <label>الشركات</label>
            @Html.DropDownList("Companies", null, "الرجاء اختيار الشركة", htmlAttributes: new { @class = "form-control", disabled = "disabled" })
        </div>
        <div class="col-lg-4">
            <div class="form-group">
                <label>الملاحظات</label>
                <input type="text" class="form-control" id="note" disabled="disabled" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label class="control-label" for="a-flow-from">التاريخ </label>
                <input type="date" class="form-control" id="trnsactionDate" />
            </div>
        </div>
        
    </div>

<div class="row">
    <table class="table table-striped table-bordered table-hover dt-responsive"  id="IncomeTransactionTable" cellspacing="0">
        <thead>
            <tr>
                <th style="width:10%;">
                    العملة
                </th>
                <th style="width:10%;">
                    المبلغ
                </th>
                <th style="width:10%;">
                    النسبة
                </th>
                <th style="width:10%;">
                    العمولة
                </th>
                <th style="width:10%;">
                    المرسل
                </th>
                <th style="width:10%;">
                    نوع الدفع
                </th>
                <th style="width:30%;">
                    المستفيد
                </th>

            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.DropDownList("Coin", null, "العملة", htmlAttributes: new { @onfocusout = "validateRowAfterAnyEvent(this)", @class = "form-control", disabled = "disabled" })
                </td>
                <td>
                    <input type="text" class="form-control" name="amount" disabled="disabled" onkeypress="validation(this, event);" onkeyup="FormaittingNumber(this); clacComission(this);" onkeydown="PriventEmptytext(this, event)" value="0" onfocusout="validateRowAfterAnyEvent(this)" />
                </td>
                <td>
                    <input type="text" class="form-control" name="ratio" disabled="disabled" onkeypress="validation(this, event);" onkeyup="FormaittingNumber(this); clacComission(this);" onkeydown="PriventEmptytext(this, event);" value="0" onfocusout="validateRowAfterAnyEvent(this)" />
                </td>
                <td>
                    <input type="text" class="form-control" name="comission" disabled="disabled" onkeypress="validation(this, event);" onkeyup="FormaittingNumber(this); calcRatio(this);" onkeydown="PriventEmptytext(this, event)" value="0" onfocusout="validateRowAfterAnyEvent(this)" />
                </td>
                <td>
                    @{
                        var clients = (List<ClientDto>)ViewData["NormalClient"];
                        <select id="senderClient" class="normalClientSelect" style="width:150px" disabled="disabled">
                            <option value="">اختر او اكتب </option>
                            @foreach (var client in clients)
                            {
                                <option value="@client.Id">@client.FullName</option>
                            }
                        </select>
                    }

                </td>
                <td>
                    @*@Html.DropDownList("TypeOfPay", null, "نوع الدفع", htmlAttributes: new { @onchange = "changeReciver(this);", @onfocusout = "validateRowAfterAnyEvent(this)" })*@
                    <select id="TypeOfPay" name="TypeOfPay" disabled="disabled" class="form-control" onchange="changeReciver(this);" onfocusout="validateRowAfterAnyEvent(this)">
                        <option value="">نوع الدفع..</option>
                        <option value="1">نقدي</option>
                        <option value="2">ذمم عملاء</option>
                        <option value="3">ذمم شركات</option>
                    </select>
                </td>
                <td>
                    <div name="nomalAgent">

                        <select class="normalClientSelect disabled=" disabled" form-control" onchange="GetClientInfo(this)" style="width:100%;">
                            <option value="">اختر او اكتب الأسم </option>
                            @{
                                foreach (var client in clients)
                                {
                                    <option value="@client.Id">@client.FullName</option>
                                }
                            }
                        </select>
                        <input type="text" disabled="disabled" class="form-control" placeholder="العنوان" style="width:50%;float:right;" name="clientAddress" />
                        <input type="text" disabled="disabled" class="form-control" placeholder="رقم الإتصال" style="width:50%;float:right;" name="clientPhone" />
                    </div>
                    <div name="Agent" hidden>
                        @Html.DropDownList("Clients", null, "اختر العمليل", htmlAttributes: new { @style = "width:100%;", @onfocusout = "validateRowAfterAnyEvent(this)", id = "agentSelect", @class = "agentSelect", disabled = "disabled" })
                        @*<br />*@
                        <input type="number" disabled="disabled" id="clientCommission" class="form-control" style="width:100%;float:right;" placeholder="عمولة العميل" onkeypress="validation(this, event);" onkeyup="FormaittingNumber(this);" onkeydown="PriventEmptytext(this, event)" onfocusout="validateRowAfterAnyEvent(this)" />
                    </div>
                    <div name="company" hidden>
                        <select class="normalClientSelect form-control" disabled="disabled" onchange="GetClientInfo(this)" style="width:100%;">
                            <option value="">اختر او اكتب الأسم </option>
                            @{
                                foreach (var client in clients)
                                {
                                    <option value="@client.Id">@client.FullName</option>
                                }
                            }
                        </select>
                        <input type="text" placeholder="عنوان المستقبل" disabled="disabled" style="width:50%;float:right" class="form-control" />
                        <input type="text" placeholder="رقم المستقبل" disabled="disabled" style="width:50%;float:right" class="form-control" />
                        <select id="senderCompanySelect" style="width:50%;float:right" disabled="disabled" class="form-control" name="companySelect" onchange="ChangeRowColor(this);" onfocusout="validateRowAfterAnyEvent(this)">
                            @{
                                var selectedList = (SelectList)ViewBag.Companies;
                                var companies = (List<CompanyForDropdownDto>)selectedList.Items;
                                foreach (var company in companies)
                                {
                                    <option value="@company.Id">@company.Name</option>

                                }
                            }
                        </select>
                        <input type="number" id="companyCommission" style="width:50%;" class="form-control" disabled="disabled" placeholder="عمولة الشركة" onkeypress="validation(this, event);" onkeyup="FormaittingNumber(this);" onkeydown="PriventEmptytext(this, event)" onfocusout="validateRowAfterAnyEvent(this)" />
                    </div>
                </td>

            </tr>
        </tbody>
    </table>
</div>

@section ScriptPath{
    <!--BEGIN DATA TABLE JS-->
    <!--data table js -->
    <script src="~/Content/assets/global/scripts/datatable.js" type="text/javascript"></script>
    <script src="~/Content/assets/global/plugins/datatables/datatables.min.js" type="text/javascript"></script>
    <script src="~/Content/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.js"
            type="text/javascript"></script>
    <!--End Data table js -->
    <!-- BEGIN PAGE LEVEL SCRIPTS -->
    <script src="~/Content/assets/pages/scripts/table-datatables-responsive.min.js" type="text/javascript"></script>
    <!-- END THEME LAYOUT SCRIPTS -->
    <!--END DATA TABLE JS-->
    <!--Begin js Jquery Confirm-->
    <script src="~/Content/Jquery-Confirm/Jquery-Confirm-Script.js"></script>
    <!--END js Jquery Confirm-->
    <script src="~/Scripts/GlopalScript.js"></script>
    <script src="~/Scripts/Clasess/IncomeTransaction.js"></script>

}

<script>
    var mainRow;
    var selectedCoin;
    var tbody = document.getElementsByTagName('tbody')[0];
    let mainCompanyBlances;
    let AllCompanyBalnces;
    var transactionModel = @Html.Raw(Json.Encode(Model));

    $(document).ready(function () {
        var row = tbody.getElementsByTagName('tr')[0];
        mainRow = row.cloneNode(true);

        select2();

        initialTransactionValues();
    });

    function initialTransactionValues() {
        $('#Companies').val(transactionModel.MainCompanyId);
        $('#note').val(transactionModel.Note);
        $('select[name="Coin"]').val(transactionModel.CoinId);
        $('input[name="amount"]').val(numberWithCommas(transactionModel.Amount));
        $('input[name="comission"]').val(numberWithCommas(transactionModel.OurComission));
        var ratioValue = (transactionModel.OurComission * 100) / transactionModel.Amount;
        $('input[name="ratio"]').val(ratioValue)

        //Sender
        $('#senderClient').val(transactionModel.SenderClient.Id).trigger('change');

        $('#TypeOfPay').val(transactionModel.TypeOfPay);
        changeReciver(document.getElementById('TypeOfPay'));

        if (transactionModel.TypeOfPay == 2) {

            $('#agentSelect').val(transactionModel.AgentId).trigger('change');
            $('#clientCommission').val(transactionModel.AgentCommission);
        } else if (transactionModel.TypeOfPay == 3) {

            var recipientSelect = $('div[name="company"]').find('.normalClientSelect');
            recipientSelect.val(transactionModel.ReceiverClient.Id).trigger('change');

            $('#senderCompanySelect').val(transactionModel.SenderCompany.CompanyId);
            $('#companyCommission').val(transactionModel.SenderCompany.CompanyCommission);

        } else {
            var recipientSelect = $('div[name="nomalAgent"]').find('.normalClientSelect');
            recipientSelect.val(transactionModel.ReceiverClient.Id).trigger('change');
        }
    }

    function select2() {
        $('.normalClientSelect').select2({
            tags: true,
            width: 'resolve'
        });
        $('.agentSelect').select2({
            width: 'resolve'
        });
    }

    function checkCompanyBlance(companyId, coinId, amount) {

        var balnce = AllCompanyBalnces.filter(c => c.CompanyId == companyId && c.CoinId == coinId)[0];
        if (balnce.MaxDebit != null) {
            if ((balnce.Total + amount) > balnce.MaxDebit) {
                return false;
            }
        }
        return true;
    }
    function checkMainCompanyBlances(coinId, Amount) {
        var balnce = mainCompanyBlances.filter(c => c.CoinId == coinId)[0];
        if (balnce.MaxCreditor != null) {
            if ((balnce.Total * -1) + Amount > balnce.MaxCreditor) {
                return false;
            }
        }
        return true;
    }

    function changeReciver(element) {
        var tpyeOfPayVal = element.value;
        var typeOfPayCell = element.parentElement;
        senderCill = typeOfPayCell.nextElementSibling;
        var normalAgentDiv = senderCill.getElementsByTagName('div')[0];
        var AgentDiv = senderCill.getElementsByTagName('div')[1];
        var comapnyDiv = senderCill.getElementsByTagName('div')[2];
        if (tpyeOfPayVal == 2) {
            AgentDiv.hidden = false;
            normalAgentDiv.hidden = true;
            comapnyDiv.hidden = true;
        } else if (tpyeOfPayVal == 3) {
            normalAgentDiv.hidden = true;
            AgentDiv.hidden = true;
            comapnyDiv.hidden = false;
        } else {
            normalAgentDiv.hidden = false;
            AgentDiv.hidden = true;
            comapnyDiv.hidden = true;
        }
        $('.normalClientSelect').select2({
            tags: true
        });
    }

    function addRowFunction(element) {


        var row = element.parentElement.parentElement;
        if (row.getElementsByTagName('td')[0].style.pointerEvents != 'none') {
            if (!CheckRow(row)) {
                return;
            }
            balanceArbitrage(row);
        }

        $('#Companies').attr("disabled", true);
        var rowTds = row.getElementsByTagName('td');
        for (var i = 0; i < rowTds.length; i++) {
            if (i + 1 == rowTds.length)
                continue;
            rowTds[i].setAttribute("style", "pointer-events:none;background-color:gray");
        }
        var lastCoin = rowTds[0].getElementsByTagName('select')[0].value;
        var newCoinSelect = mainRow.getElementsByTagName('td')[0].getElementsByTagName('select')[0];
        newCoinSelect.value = lastCoin;
        var companies = rowTds[6].getElementsByTagName('div')[2].getElementsByTagName('select')[1].innerHTML;
        mainRow.getElementsByTagName('td')[6].getElementsByTagName('div')[2].getElementsByTagName('select')[1].innerHTML = companies;

        tbody.appendChild(mainRow);
        mainRow = mainRow.cloneNode(true);
        element.style.display = 'none';
        $('#numberOfOuterTransaction').text(parseInt($('#numberOfOuterTransaction').text()) + 1);
        select2();
    }
    function balanceArbitrage(row) {
        var tds = row.getElementsByTagName('td');
        var coinId = tds[0].getElementsByTagName('select')[0].value;
        var amount = (tds[1].getElementsByTagName('input')[0].value);
        var ratio = tds[2].getElementsByTagName('input')[0].value;
        var comission = tds[3].getElementsByTagName('input')[0].value;
        comission = deleteCommaFromNumber(comission);
        var typeOfPay = tds[5].getElementsByTagName('select')[0].value;
        mainCompanyBlances.filter(c => c.CoinId == coinId)[0].Total -= parseFloat(amount) + parseFloat(comission);
        switch (typeOfPay) {
            case '2': {
            } break;
            case '3': {
                AddAmountTOCompany(tds[6], coinId, amount);
            } break;
        }
    }
    function CheckRow(row, bool) {
        if (!CheckCompanies()) {
            ErrorMessage("يجب عليك تحديد الشركة");
            return false;
        }
        var tds = row.getElementsByTagName('td');
        var coinId = tds[0].getElementsByTagName('select')[0].value;
        if (coinId == undefined || coinId == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك تحديد العملة");
            return;
        }

        var amount = (tds[1].getElementsByTagName('input')[0].value);
        if (amount == undefined || amount == "" || amount == 0) {
            if (bool == undefined)
                ErrorMessage("يجب عليك تحديد المبلغ");
            return;
        }
        amount = deleteCommaFromNumber(amount);

        var ratio = tds[2].getElementsByTagName('input')[0].value;
        if (ratio == undefined || ratio == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك تحديد النسبة ")
            return false;
        }

        var comission = tds[3].getElementsByTagName('input')[0].value;
        if (comission == undefined || comission == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك تحديد العمولة")
            return false;
        }
        comission = deleteCommaFromNumber(comission);
        if (!checkSendrByrow(row, bool)) {
            return false;
        }

        var typeOfPay = tds[5].getElementsByTagName('select')[0].value;
        if (typeOfPay == undefined || typeOfPay == "") {
            if (bool == undefined)
                ErrorMessage('يجب عليك اختيار نوع الدفع');
            return false;
        }
        switch (typeOfPay) {
            case '1': {

                if (!checkNormalReciver(tds[6], bool))
                    return false;
            } break;
            case '2': {
                if (!checkAgent(tds[6], bool))
                    return false;
            } break;
            case '3': {
                if (!checkCompany(tds[6], bool, coinId, parseFloat(amount))) {
                    return false;
                }
            } break;
            default: {
                if (bool == undefined)
                    ErrorMessage("هناك خطاء بنوع الدفع الرجاء إعادة تحميل الصفحة");
                return false;
            }
        }

        if (!checkMainCompanyBlances(coinId, parseFloat(amount) + parseFloat(comission))) {
            if (bool == undefined) {
                if (HavePrivlege('BreakTheWall')) {
                    //if privlege have password;
                    var asn = confirm("سوف يتم تخطي الحد المسموح به للشركة " + $("#Companies option:selected").text() + " هل انت متأكد من ذالك ");
                    if (!asn) {
                        return false;
                    }
                }
                else {
                    alert("لا يمكنك تخطي الحد المسوح به للشركة" + $("#Companies option:selected").text());
                    return false;
                }
            }
        }
        return true;
    }

    // check sender Name
    function checkSendrByrow(row, bool) {
        var tds = row.getElementsByTagName('td');
        var senderTd = tds[4];
        var inputs = senderTd.getElementsByTagName('select');
        var senderFirstName = inputs[0].value;
        if (senderFirstName == undefined || senderFirstName == "") {
            if (bool == undefined) {
                ErrorMessage("يجب ان تملأ حقل اسم للمرسل");
            }
            return false;
        }
        return true;
    }

    function ErrorMessage(message) {
        $.confirm({
            title: "خطاء",
            content: message,
            buttons: {
                موافق: {
                }
            }
        });
    }


    function CheckCompanies() {
        var Companies = document.getElementById('Companies');
        if (Companies.value == "") {
            return false;
        }
        return true;
    }

    function checkNormalReciver(td, bool) {
        var div = td.getElementsByTagName('div')[0];
        var select = div.getElementsByTagName('select')[0];
        if (select.value == "") {
            if (bool == undefined) {
                ErrorMessage("يجب ان تملأ حقل الأسم للمستقبل");

            }
            return false;
        }
        var reciverAddress = div.getElementsByTagName('input')[0].value;
        if (reciverAddress == undefined || reciverAddress == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك ان تملأ حقل العنوان للمستقبل");
            return false;
        }
        var phone = div.getElementsByTagName('input')[1].value;
        if (phone == undefined || phone == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك ان تملأ حقل رقم الهاتف للمستقبل");
            return false;
        }
        return true;
    }
    function checkAgent(td, bool) {
        var div = td.getElementsByTagName('div')[1];
        var Agent = div.getElementsByTagName('select')[0].value;
        if (Agent == undefined || Agent == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك تحديد العميل");
            return false;
        }
        return true;
    }
    function AddAmountTOCompany(td, coinId, amoun) {
        var div = td.getElementsByTagName('div')[2];
        var company = div.getElementsByTagName('select')[1];
        var companyComission = parseFloat(deleteCommaFromNumber(div.getElementsByTagName('input')[2].value));

        if (isNaN(companyComission)) {
            companyComission = 0;
        }

        var companyCoinBlance = AllCompanyBalnces.filter(c => c.CompanyId == company.value && c.CoinId == coinId)[0];

        companyCoinBlance.Total += amoun - companyComission;

    }
    function checkCompany(td, bool, coinId, amount) {
        var div = td.getElementsByTagName('div')[2];
        var company = div.getElementsByTagName('select')[1];

        if (company.value == undefined || company.value == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك اختيار الشركة المستقبلة");
            return false;
        }
        var clientSelect = div.getElementsByTagName('select')[0];
        if (clientSelect.value == "") {
            if (bool == undefined) {
                ErrorMessage("يجب عليك تحديد اسم المستقبل");
            }
            return false;
        }
        if (bool == undefined) {
            var commission = parseFloat(deleteCommaFromNumber(div.getElementsByTagName('input')[2].value));
            if (isNaN(commission)) {
                commission = 0;
            }
            amount -= commission;
            if (!checkCompanyBlance(company.value, coinId, amount)) {
                if (HavePrivlege('BreakTheWall')) {
                    var asn = confirm("سوف يتم تخطي الحد المسموح به للشركة " + company.options[company.selectedIndex].text + " هل انت متأكد من ذالك ");
                    if (!asn) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    function checkRevicverCompany(td) {
        var select = td.getElementsByTagName('select').value;
        if (select == undefined || select == "") {
            if (bool == undefined)
                ErrorMessage("يجب عليك تحديد الشركة");
            return false;
        }
        return true;
    }
    $('#Companies').change(function () {
        //get companyBalnces
        $.post(
            '@Url.Action("GetCompanyCashes", "CompanyCash")', {
                companyId: $(this).val()
            }, function (data) {
                mainCompanyBlances = data;
            });
        $.post(
            '@Url.Action("GetCompanyCashesForOther", "CompanyCash")', {
                companyId: $(this).val()
            },
            function (data) {
                AllCompanyBalnces = data;

            }
        );
        //and get other company
        // and recalc all fucking thing
        var IncomeTransactionTable = document.getElementById('IncomeTransactionTable');
        var tbody = IncomeTransactionTable.getElementsByTagName('tbody')[0];
        var rows = tbody.getElementsByTagName('tr');
        var companySelect = document.getElementsByName('companySelect');
        for (var i = 0; i < companySelect.length; i++) {
            companySelect[i].innerHTML = "";
            var mainOption = document.createElement('option');
            mainOption.innerText = "اختر الشركة";
            mainOption.value = "";
            companySelect[i].appendChild(mainOption);
        }
        if (companySelect.value != "") {
            for (var i = 0; i < companySelect.length; i++) {
                FillcompanySelect(companySelect[i], $(this).val());
                if (rows.length > 1) {
                    var row = companySelect[i].parentElement.parentElement.parentElement;
                    if (row.getElementsByTagName('td')[5].getElementsByTagName('select')[0].value == 3) {
                        if (!CheckRow(row, true)) {
                            row.style.backgroundColor = "red";
                        }
                    }
                }
            }
        }
    });
    function FillcompanySelect(select, id) {
        $.post(
            '@Url.Action("CompaniesDontHaveId", "Company")', {
                id: id,
            },
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    var option = document.createElement('option');
                    option.innerText = data[i].Name;
                    option.value = data[i].Id;
                    select.appendChild(option);
                }
            }
        );
    }

    function ChangeRowColor(element) {
        if (checkCompany(element.parentElement.parentElement)) {
            element.parentElement.parentElement.parentElement.style.backgroundColor = null;
        }
    }
    function validateRowAfterAnyEvent(element) {
        var row = getRowFormAnyElement(element);
        if (row == undefined)
            return;
        if (CheckRow(row, true)) {
            row.style.backgroundColor = null;
        }
    }
    function getRowFormAnyElement(elemet) {
        if (elemet == undefined || elemet == null)
            return undefined;
        if (elemet.tagName == "TR") {
            return elemet;
        }
        return getRowFormAnyElement(elemet.parentElement);
    }
    function RemoveRow(element) {
        var IncomeTransactionTable = document.getElementById('IncomeTransactionTable');
        var tbody = IncomeTransactionTable.getElementsByTagName('tbody')[0];
        var rows = tbody.getElementsByTagName('tr');
        if (rows.length <= 1)
            return;

        var row = getRowFormAnyElement(element);
        var rowIndex = 0;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i] == row) {
                rowIndex = i;
                break;
            }
        }

        if (rowIndex != 0)
            rows[rowIndex - 1].getElementsByTagName('td')[7].getElementsByTagName('button')[0].style.display = 'block';
        RetriveMoney(row);
        row.remove();

        $('#numberOfOuterTransaction').text(parseInt($('#numberOfOuterTransaction').text()) - 1);
    }
    function RetriveMoney(row) {
        var tds = row.getElementsByTagName('td');
        var coinId = tds[0].getElementsByTagName('select')[0].value;
        var amount = parseFloat(deleteCommaFromNumber(tds[1].getElementsByTagName('input')[0].value));
        var myCommission = parseFloat(deleteCommaFromNumber(tds[2].getElementsByTagName('input')[0].value));

        mainCompanyBlances.filter(c => c.CoinId == coinId)[0].Total += (amount) + (myCommission);
        var typeOfPay = tds[5].getElementsByTagName('select')[0].value;
        switch (typeOfPay) {
            case '2': {
            } break;
            case '3': {
                ReriveCompanyMoney(tds[6], coinId, amount);
            } break;
        }
    }
    function ReriveCompanyMoney(td, coinId, amout) {
        var div = td.getElementsByTagName('div')[2];
        var company = div.getElementsByTagName('select')[1];

        var companyComission = parseFloat(deleteCommaFromNumber(div.getElementsByTagName('input')[2].value));
        if (isNaN(companyComission)) {
            companyComission = 0;
        }
        var companyCoinBlance = AllCompanyBalnces.filter(c => c.CompanyId == company.value && c.CoinId == coinId)[0];
        companyCoinBlance.Total -= amout + companyComission;
    }

    function clacComission(element) {
        var row = getRowFormAnyElement(element);
        var amountTd = row.getElementsByTagName('td')[1];
        var amount = deleteCommaFromNumber(amountTd.getElementsByTagName('input')[0].value);
        var ratioTd = row.getElementsByTagName('td')[2];
        var ratio = deleteCommaFromNumber(ratioTd.getElementsByTagName('input')[0].value);

        var comissionTd = row.getElementsByTagName('td')[3];
        var comissionInput = comissionTd.getElementsByTagName('input')[0];
        comissionInput.value = numberWithCommas((parseFloat(amount) * parseFloat(ratio)) / 100) ? numberWithCommas((parseFloat(amount) * parseFloat(ratio)) / 100) : '0';
    }
    function calcRatio(element) {
        var row = getRowFormAnyElement(element);
        var amountTd = row.getElementsByTagName('td')[1];
        var amount = parseFloat(deleteCommaFromNumber(amountTd.getElementsByTagName('input')[0].value));
        var ratioTd = row.getElementsByTagName('td')[2];
        var comissionTd = row.getElementsByTagName('td')[3];
        var comissionInput = comissionTd.getElementsByTagName('input')[0];
        var comission = parseFloat(deleteCommaFromNumber(comissionInput.value));
        var ratioInput = ratioTd.getElementsByTagName('input')[0];
        if ((comission * 100 / amount) == 0) {
            ratioInput.value = 0;
            return;
        }
        ratioInput.value = numberWithCommas(comission * 100 / amount);
    }

    function test() {
        var x = JSON.parse('{"Transactions":[{"CoinId":"1039","Amount":100,"OurComission":12,"TypeOfPay":"1","Sender":{"Name":"مرسل 1"},"ReciverClinet":{"Name":"مستقبل 1","address":"عنوان مستقبل 1","Phone":"32423"}},{"CoinId":"1039","Amount":130,"OurComission":13,"TypeOfPay":"2","Sender":{"Name":"مرسل 2"},"AgentId":"6198","AgentCommission":"3"},{"CoinId":"1039","Amount":300,"OurComission":30,"TypeOfPay":"3","Sender":{"Name":"مرسل 1"},"ReciverCompany":{"CompanyId":"6039","CompanyCommission":10,"ReciverClinet":{"Name":"مستقبل 1 شركة 2","address":"عنوان","Phone":"2121"}}}],"MainCompanyId":"6038","Note":"ملاحظات"}');
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: "{Incometransacrions:" + JSON.stringify(x) + "}",
            url: '@Url.Action("Index", "InnerTransaction")',
            success: function (data) {
                if (data == "true") {
                    alert('تم');
                    location.reload();
                }
                else {
                    alert('حدث خطأ ما يجب إعادة المحاولة');

                }
            },
            error: function (eee) {
                alert('errro');
                console.log(eee);
            }
        }
        );
    }

    function GetClientInfo(element) {

        var value = element.value;
        var div = GetDiveFromAbyElement(element);
        var input = div.getElementsByTagName('input');
        var addressText = input[0];
        var phoneText = input[1];
        addressText.value = "";
        phoneText.value = "";
        if (isNaN(value) || value == "") {
            return;
        }
        $.post(
            '@Url.Action("GetClientInformation", "Client")', {
                clientId: value,
            },
            function (data) {
                addressText.value = data.Address;
                phoneText.value = data.Phone;
            }
        )
    }


    function getClientDto(selectEle,address,phone) {
        var id = $(selectEle).select2().val();

        var options = selectEle.children;
        for (var i = 0; i < options.length; i++) {
            var selector = $(options[i]);
            if (selector.val() == id) {

                var text = selector.text();
                return new ClientDTO(id, text, address, phone);
            }
        }

        return null;
    }
</script>
