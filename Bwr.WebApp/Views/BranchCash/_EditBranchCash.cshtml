

@model BWR.Application.Dtos.Branch.BranchCashUpdateDto
@{
    Layout = null;
}
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title">تعديل الرصيد الاولي</h4>
        </div>
        @using (Ajax.BeginForm("Edit", "BranchCash", null, new AjaxOptions { HttpMethod = "Post" }, new { @class = "form-horizontal", role = "form", id = "editBranchCashForm" }))
        {
            <div class="modal-body">
                <div class="col-lg-12 col-md-12">
                    <div class="form-horizontal">
                        @Html.HiddenFor(model => model.Id)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name">الرصيد الاولي <span class="text-danger">*</span></label>
                            <div class="col-md-10">
                                @*@Html.EditorFor(model => model.InitialBalance, new { htmlAttributes = new { @class = "form-control", id = "e-initialBalance" } })
                                @Html.ValidationMessageFor(model => model.InitialBalance, "", new { @class = "text-danger" })*@
                                <input type="text" id="e-initialBalance" onkeypress="validation(this, event); " onkeyup="FormaittingNumber(this);"  class="form-control"/>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name"> هي العملة الاساسية </label>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    <label>
                                        @Html.EditorFor(model => model.IsMainCoin, new { htmlAttributes = new { @class = "flat", id = "e-isMainCoin" } })
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="button" id="btnEditBranchCash" class="btn btn-primary">حفظ <span class="glyphicon glyphicon-save"></span></button>
                        <button type="button" class="btn btn-default" onclick="resetEditBranchCashContainer()" data-dismiss="modal">إغلاق <span class="glyphicon glyphicon-remove"></span></button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>

    $(function () {
        var initialBalacne = @Model.InitialBalance;
        $('#e-initialBalance').val(numberWithCommas(initialBalacne));
        $('input.flat').iCheck({
            checkboxClass: 'icheckbox_flat-green',
            radioClass: 'iradio_flat-green'
        });
        //========

        var $form = $("#editBranchCashForm");
        $.validator.unobtrusive.parse($form);


        $('#btnEditBranchCash').on("click", function (event) {

            if ($form.valid()) {

                var dto = {
                    Id: '@Html.Raw(Model.Id)',
                    InitialBalance:deleteCommaFromNumber( $('#e-initialBalance').val()),
                    IsMainCoin: getIsMainCoinValue()
                };

                $.ajax({
                    url: '@Url.Action("Edit", "BranchCash")',
                    type: 'POST',
                    data: dto,
                    dataType: "json",
                    cache: false,
                    success: function (data) {

                        if (data.Success == true) {

                            resetEditBranchCashContainer();

                            $branchCashDataTable.refresh();
                            toastr.success('تم الحفظ بنجاح')
                        }
                        else {
                            toastr.error(data.Message);
                        }

                    },
                    error: function () { toastr.error("خدث خطأ ما أثناء الإضافة"); }
                });

            }

        });

    });

    function getIsMainCoinValue() {
        var divChecked = $('#e-isMainCoin').parent();
        if (divChecked.hasClass('checked'))
            return true;
        else
            return false;
    }

    function resetEditBranchCashContainer() {

        $('#editBranchCashModal').modal('hide');
        $('#editBranchCashContainer').html('');
    }

</script>
