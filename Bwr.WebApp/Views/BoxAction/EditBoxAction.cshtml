@model BWR.Application.Dtos.BoxAction.BoxActionInitialDto
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_BlankPageLayout.cshtml";
}
<div class="container">
    <div class="row">
        <div class="col-lg-4">
            <label>تاريخ الحركة</label>
            <input type="date" class="form-control" id="date" />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4">
            <label>نوع الحركة</label>
            <select class="form-control" id="typeOfAction">
                <option value="-1">
                    صرف
                </option>
                <option value="1">
                    قبض
                </option>
            </select>
        </div>
        <div class="col-lg-4">
            <label>العملة</label>
            @Html.DropDownList("Coins", new SelectList(Model.Coins, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control", id = "coins" })
        </div>
        <div class="col-lg-4">
            <label>الحساب</label>
            <select class="form-control" id="firstAcountSelect">
                <option value="1">عامة</option>
                @*<option value="2">حوالة مباشرة</option>*@
                <option value="3">حساب العملاء</option>
                <option value="4">حساب الشركات</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div id="agentDiv" name="acountDiv">
            <div class="col-lg-6">
                <label>اختر العميل</label>
                @Html.DropDownList("Agents", new SelectList(Model.Agents, "Id", "FullName"), "", htmlAttributes: new { @class = "form-control", id = "agents" })
            </div>
            <div class="col-lg-6">
                <div class="row">
                    <div class="col-lg-6">
                        <label>رصيد العميل</label>
                        <br />
                        <span class="label label-primary" id="agentcurrentBalnce"></span>
                    </div>
                    <div class="col-lg-6">
                        <label>الرصيد المتبقي</label>
                        <br />
                        <span class="label label-primary" id="agentnewBalnce"></span>
                    </div>
                </div>
            </div>
        </div>
        <div id="ExpencesDiv" name="acountDiv" class="col-lg-6">
            <label>الصرفيات</label>
            @Html.DropDownList("PublicExpenses", new SelectList(Model.PublicExpenses, "Id", "Name"), "", htmlAttributes: new { @class = "form-control", id = "publicExpenses" })
        </div>
        <div id="incominingDiv" name="acountDiv" class="col-lg-6">
            <label>الإرادات</label>
            @Html.DropDownList("PublicIncomes", new SelectList(Model.PublicIncomes, "Id", "Name"), "", htmlAttributes: new { @class = "form-control", id = "publicIncomes" })
        </div>
        <div id="companyDiv" name="acountDiv">
            <div class="col-lg-6">
                <label>الشركات</label>
                @Html.DropDownList("Companies", new SelectList(Model.Companies, "Id", "Name"), "", htmlAttributes: new { @class = "form-control", id = "companies" })
            </div>
            <div class="col-lg-6">
                <div class="row">
                    <div class="col-lg-6">
                        <label>رصيد الشركة</label>
                        <br />
                        <span class="label label-primary" id="companycurrentBalnce"></span>
                    </div>
                    <div class="col-lg-6">
                        <label>الرصيد المتبقي</label>
                        <br />
                        <span class="label label-primary" id="copanynewBalnce"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <label>المبلغ</label>
            <input type="text" class="form-control" onkeypress="validation(this, event); " onkeyup="FormaittingNumber(this);" id="amout" />
        </div>
        <div class="col-lg-6">
            <label>الملاحظات</label>
            <input type="text" class="form-control" name="note" id="note" />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4">
            <label id="secoundAcountLabel">جهة الصرف</label>
            <select class="form-control" id="secoundAcount">
                <option value="1">الصندوق</option>
                <option value="2">حساب العملاء</option>
                <option value="3">حساب الشركات</option>
            </select>
        </div>
        <div class="col-lg-8" id="secounAcountDetials">
            <div id="secoundCompanyDiv">
                <div class="col-lg-6">
                    <label> اختر الشركة</label>
                    <select id="secoundCompanySelect"></select>
                </div>
                <div class="col-lg-6">
                    <div class="row">
                        <div class="col-lg-6">
                            <label>الرصيد</label>
                            <br />
                            <span class="label label-primary" id="secondcompanycurrentBalnce"></span>
                            <span class="label label-primary" id="secondcompanycurrentBalnceStatus"></span>
                        </div>
                        <div class="col-lg-6">
                            <label>الرصيد المتبقي</label>
                            <br />
                            <span class="label label-primary" id="secondcopanynewBalnce"></span>
                            <span class="label label-primary" id="secondcompanynewBalanceStatus"></span>

                        </div>
                    </div>
                </div>
            </div>
            <div id="secoundAgentDiv">
                <div class="col-lg-6">
                    <label> اختر العميل</label>
                    <select id="secoundAgentSelect"></select>
                </div>
                <div class="col-lg-6">
                    <div class="row">
                        <div class="col-lg-4">
                            <label>الرصيد</label>
                            <span class="label label-primary" id="secoundagentcurrentBalnce"></span>
                            <span lass="label label-primary" id="secoundagentcurrentBalnceStatus"></span>

                        </div>
                        <div class="col-lg-6">
                            <label>الرصيد المتبقي </label>

                            <span class="label label-primary" id="secoundagentnewBalnce"></span>
                            <span lass="label label-primary" id="secoundagentnewBalnceStatus"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-primary" style="margin-top:10px" id="submit">حفظ</button>
    <button class="btn btn-danger" style="margin-top:10px" id="delete"> حذف </button>
</div>
@section ScriptPath{
    <script src="~/Scripts/GlopalScript.js"></script>
    @*<script src="~/Scripts/BoxAction/Index.js"></script>*@
}
<script>
    var clientBalnae;
    var companyBalnce;
    var $boxActionDto;
    var secoundClientBalnce;
    var secoundCompanyBalcne;
    var oldAmount;

    $(function () {
        getBoxAxtionById('@ViewBag.MoneyActionId');

        $('#secoundAcount').change(function () {
            hideAllSecoundDiv();

            var secoundAcount = $(this).val();
            if (secoundAcount == 1) {
                return;
            }
            if (secoundAcount == 2) {
                secounAcountDetials.style.display = 'block';
                secoundAgentDiv.style.display = 'block';
            }
            if (secoundAcount == 3) {
                secounAcountDetials.style.display = 'block';
                secoundCompanyDiv.style.display = 'block';
            }
            fillSecoundSelect();

        });
        $('#submit').click(function () {

            if (!validate()) {
                return;
            }
            var secoundAcount = $('#secoundAcount').val();
            var coinId = $('#coins').val();
            var note = $('#note').val();
            var amount = $('#amout').val();

            amount = deleteCommaFromNumber(amount);
            var actionType = parseInt($('#typeOfAction').val());
            var firstAcountType = $('#firstAcountSelect').val();
            if (secoundAcount == 1 && firstAcountType == 1 && actionType == -1) {

                payExpenciveFromMainBox(parseInt($('#publicExpenses').val()), coinId, amount, note);

            } else if (secoundAcount == 1 && firstAcountType == 1 && actionType == 1) {

                reciverIncomeToMainBox($('#publicIncomes').val(), coinId, amount, note);

            } else if (secoundAcount == 1 && firstAcountType == 3 && actionType == -1) {

                var client = $('#agents').val();
                if (client == "") {
                    toastr["error"]("يجب عليك اختيار عميل", "");
                    return;
                }
                payForClientFromMainBox($('#agents').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 1 && firstAcountType == 3 && actionType == 1) {
                var client = $('#agents').val();
                if (client == "") {
                    toastr["error"]("يجب عليك اختيار عميل", "");
                    return;
                }
                reciveFromClientToMainBox($('#agents').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 1 && firstAcountType == 4 && actionType == -1) {

                var company = $('#companies').val();
                if (company == "") {
                    toastr["error"]("يجب عليك ان تحدد الشركة", "خطاْ");
                    return;
                }

                payForCompanyFromMainBox($('#companies').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 1 && firstAcountType == 4 && actionType == 1) {

                var company = $('#companies').val();
                if (company == "") {
                    toastr["error"]("يجب عليك ان تحدد الشركة", "خطاْ");
                    return;
                }

                reciveFromCompanyToMainBox($('#companies').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 2 && firstAcountType == 3 && actionType == -1) {

                amount = parseFloat(amount);
                amount = amount * -1;

                fromClientToClient($('#agents').val(), $('#secoundAgentSelect').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 2 && firstAcountType == 3 && actionType == 1) {

                amount = parseFloat(amount);
                fromClientToClient($('#agents').val(), $('#secoundAgentSelect').val(), $('#coins').val(), amount, note);
            } else if (secoundAcount == 2 && firstAcountType == 4 && actionType == -1) {

                amount = parseFloat(amount);
                amount = amount * -1;

                fromCompanyToClient($('#companies').val(), $('#secoundAgentSelect').val(), $('#coins').val(), amount, note);
            } else if (secoundAcount == 2 && firstAcountType == 4 && actionType == 1) {

                amount = parseFloat(amount);

                fromCompanyToClient($('#companies').val(), $('#secoundAgentSelect').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 3 && firstAcountType == 3 && actionType == -1) {

                amount = parseFloat(amount);
                amount = amount * -1;

                fromClientToCompany($('#agents').val(), $('#secoundCompanySelect').val(), $('#coins').val(), amount, note);
            } else if (secoundAcount == 3 && firstAcountType == 3 && actionType == 1) {
                amount = parseFloat(amount);

                fromClientToCompany($('#agents').val(), $('#secoundCompanySelect').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 3 && firstAcountType == 4 && actionType == -1) {

                amount = parseFloat(amount);
                amount = amount * -1;
                fromCompanyToCompany($('#companies').val(), $('#secoundCompanySelect').val(), $('#coins').val(), amount, note);

            } else if (secoundAcount == 3 && firstAcountType == 4 && actionType == 1) {

                amount = parseFloat(amount);
                fromCompanyToCompany($('#companies').val(), $('#secoundCompanySelect').val(), $('#coins').val(), amount, note);
            }
            else if (secoundAcount == 3 && firstAcountType == 1 && actionType == -1) {
                amount = parseFloat(amount);
                fromCompanyToPublicExpenes(coinId, $('#secoundCompanySelect').val(), $('#publicExpenses').val(), amount, note);
            }
            else if (secoundAcount == 3 && firstAcountType == 1 && actionType == 1) {
                amount = parseFloat(amount);
                fromCompanyToPublicIncome(coinId, $('#secoundCompanySelect').val(), $('#publicIncomes').val(), amount, note);
            }
            else if (secoundAcount == 2 && firstAcountType == 1 && actionType == -1) {
                amount = parseFloat(amount);
                fromClientToPublicExpenes(coinId, $('#secoundAgentSelect').val(), $('#publicExpenses').val(), amount, note);
            }
            else if (secoundAcount == 2 && firstAcountType == 1 && actionType == 1) {
                amount = parseFloat(amount);
                fromClientToPublicIncome(coinId, $('#secoundAgentSelect').val(), $('#publicIncomes').val(), amount, note);
            }

        });
        $('#amout').keyup(() => {
            calcAllFirstBalance();
            calcAllSecoundBalances();
        });
        $('#coins').change(function () {

            if ($('#agents').val() == "") {
                resetAgentBlance();
            } else {
                 getClientBalanceByCoin($('#agents').val(), $(this).val());
                clacAgentCurrentBalcne();
            }
            if ($('#companies').val() == "") {
                resetCompanyBalnce();
            } else {
                getCompanyBalnceByCoin($('#companies').val(), $(this).val())
            }
            if ($('#secoundAgentSelect').val()) {
                 getSecoundClientBalanceByCoin($('#secoundAgentSelect').val(), $(this).val());
                calcSecoundAgentCurrentBalcne();
            } else {
                resetSecoundAgentBalcne();
            }
            if ($('#secoundCompanySelect').val()) {
                 getSecoundCompanyCompanyBalnceByCoin($('#secoundCompanySelect').val(), $(this).val());
                calcSecoundCompanyCurrentBalance();
            } else {
                resetSecoundCompanyBalnace();
            }
        });
        $('#companies').change(async function () {
            if ($(this).val() == "") {
                resetCompanyBalnce();
                return;
            }
            await getCompanyBalnceByCoin($(this).val(), $('#coins').val());
            calcAllFirstBalance();
            fillSecoundSelect();
        });
        $('#secoundCompanySelect').change(async function () {
            if (!$(this).val()) {
                resetSecoundCompanyBalnace();
                return;
            }
            await getSecoundCompanyCompanyBalnceByCoin($(this).val(), $('#coins').val());
            calcAllSecoundBalances();

        });
        $('#agents').change(async function () {
            if ($(this).val() == "") {
                resetAgentBlance();
                return;
            }
            await getClientBalanceByCoin($(this).val(), $('#coins').val());
            calcAllFirstBalance();
            fillSecoundSelect();
        });
        $('#typeOfAction').change(function () {
            showFromAcount($(this).val(), $("#firstAcountSelect").val());            
        });
        $('#firstAcountSelect').change(function () {

            showFromAcount($('#typeOfAction').val(), $(this).val());

        });
        $('#secoundAgentSelect').change(async function () {
           await getSecoundClientBalanceByCoin($(this).val(), $('#coins').val());
            calcAllSecoundBalances();
        });
    });

    function hideAllSecoundDiv() {
        secounAcountDetials.style.display = 'none';
        secoundAgentDiv.style.display = 'none';
        secoundCompanyDiv.style.display = 'none';
    }

   async function fillSecoundSelect() {

        $('#secoundAgentSelect').html('');
        $('#secoundCompanySelect').html('');
        $('#secoundAgentSelect').select2({ allowClear: !0, placeholder: "العملاء", width: null });
        $('#secoundCompanySelect').select2({ allowClear: !0, placeholder: "الشركات", width: null });
        var companyId;
        var agentId;
        if ($('#agents').val() == "") {
            agentId = null;
        } else {
            agentId = $('#agents').val();
        }
        if ($('#companies').val() == "") {
            companyId = null;
        } else {
            companyId = $('#companies').val();
        }
       await $.post(
            '@Url.Action("GetCompanyWithoutSpecific", "Company")',
            {
                'companyId': companyId,
            },
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    var newOption = new Option(data[i].Name, data[i].Id, false, false);
                    $('#secoundCompanySelect').append(newOption);
                }
                $('#secoundCompanySelect').val(null).trigger('change');
            }
        )
       await $.post(
            '@Url.Action("GetAllWithoutSpecific", "Client")',
            {
                'clientId': agentId,
            },
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    var newOption = new Option(data[i].FullName, data[i].Id, false, false);
                    $('#secoundAgentSelect').append(newOption);
                }
                $('#secoundAgentSelect').val(null).trigger('change');
                console.log('finsihFill');
            }
        )

    }

    function showFromAcount(typeOfAction, acountId) {

        $('div[name="acountDiv"]').each(function (index) {
            $(this).hide();
        });
        if (acountId == 3) {
            $('#agentDiv').show(0, function () {
                $('#agents').select2();
            });
            return;
        }
        if (acountId == 4) {
            $('#companyDiv').show(0, function () {
                $('#companies').select2();
            });
            return;
        }
        if (acountId == 1) {
            if ($('#typeOfAction').val() == -1) {
                $('#ExpencesDiv').show();
                return;
            } else {
                $('#incominingDiv').show();
                return;
            }
        }
    }

   async function getClientBalanceByCoin(clientId, coinId) {
        if ($boxActionDto.CoinId == coinId && $boxActionDto.FirstClientId == clientId) {
            var total = $boxActionDto.FirstBalanceFeforeAction;

                    var status = "";
                    if (total > 0) {
                        status = "له";
                    }
                    else if (total < 0) {
                        status = "عليه";
                    }
                    var balnce = numberWithCommas(Math.abs(total));
                    $('#agentnewBalnce').text(balnce);
                    $('#agentcurrentBalnceStatus').text(status);
                    $('#agentcurrentBalnce').text(balnce);
                    $('#agentnewBalnceStatus').text(status);
        }
        else {
        await    $.post(
                '@Url.Action("GetClientCashByCoin", "ClientCash")',
                {
                    clientId: clientId,
                    coinId: coinId
                }, function (data) {
                    clientBalnae = data;
                    var total = data.Total;
                    var status = "";
                    if (total > 0) {
                        status = "له";
                    }
                    else if (total < 0) {
                        status = "عليه";
                    }
                    var balnce = numberWithCommas(Math.abs(parseFloat(data.Total)));
                    $('#agentnewBalnce').text(balnce);
                    $('#agentcurrentBalnceStatus').text(status);
                    $('#agentcurrentBalnce').text(balnce);
                    $('#agentnewBalnceStatus').text(status);
                }
            );
        }
    }

    async function getCompanyBalnceByCoin(companyId, coinId) {
        if (isSameFirstAccountAndSameCoinForCompany()) {
            var total = $boxActionDto.FirstBalanceFeforeAction;
            var status = "";
                if (total > 0) {
                    status = "له";
                }
                else if (total < 0) {
                    status = "عليه";
                }
                total = numberWithCommas(Math.abs(total));
                $('#companycurrentBalnce').text(total);
                $('#companycurrentBalnceStatus').text(status);
                $('#copanynewBalnce').text(total);
                $('#companynewBalanceStatus').text(status);
        }
        else {
            await $.post(
                '@Url.Action("GetCompanyMaxAndDeptByCoin", "CompanyCash")', {
                companyId: companyId,
                coinId: coinId
            }, function (data) {
                companyBalnce = data;

                var total = parseFloat(data.Total);
                var status = "";
                if (total > 0) {
                    status = "له";
                }
                else if (total < 0) {
                    status = "عليه";
                }
                total = numberWithCommas(Math.abs(total));
                $('#companycurrentBalnce').text(total);
                $('#copanynewBalnce').text(total);
                $('#companycurrentBalnceStatus').text(status);
                $('#companynewBalanceStatus').text(status);
            });
        }
    }

  async  function getSecoundClientBalanceByCoin(clientId, coinId) {
                $('#secoundagentnewBalnce').text('');
                $('#secoundagentcurrentBalnceStatus').text('');
                $('#secoundagentcurrentBalnce').text('');
                $('#secoundagentnewBalnceStatus').text('');
      secoundClientBalnce = null;
      if (!isSameSecAccountAndSameCoinForClient() && clientId != null && coinId != null) {
          await $.post(
              '@Url.Action("GetClientCashByCoin", "ClientCash")',
              {
                  clientId: clientId,
                  coinId: coinId
              }, function (data) {
                  secoundClientBalnce = data;
                  var total = data.Total;
                  var status = "";
                  if (total > 0) {
                      status = "له";
                  }
                  else if (total < 0) {
                      status = "عليه";
                  }
                  var balnce = numberWithCommas(Math.abs(parseFloat(data.Total)));
                  $('#secoundagentnewBalnce').text(balnce);
                  $('#secoundagentcurrentBalnceStatus').text(status);
                  $('#secoundagentcurrentBalnce').text(balnce);
                  $('#secoundagentnewBalnceStatus').text(status);
              }
          );
      } else {
          secoundClientBalnce = null;
          var total = $boxActionDto.SecondBalanceFeforeAction;
                  var status = "";
                  if (total > 0) {
                      status = "له";
                  }
                  else if (total < 0) {
                      status = "عليه";
                  }
                  var balnce = numberWithCommas(Math.abs(parseFloat(total)));
                  $('#secoundagentnewBalnce').text(balnce);
                  $('#secoundagentcurrentBalnceStatus').text(status);
                  $('#secoundagentcurrentBalnce').text(balnce);
                  $('#secoundagentnewBalnceStatus').text(status);
      }
    }
    function initialSecoundClientBalance(clientId, coinId) {
        $.post(
            '@Url.Action("GetClientCashByCoin", "ClientCash")',
            {
                clientId: clientId,
                coinId: coinId
            }, function (data) {
                secoundClientBalnce = data;
            }
        );
    }

    async function getSecoundCompanyCompanyBalnceByCoin(companyId, coinId) {
        if (!isSameSecAccountAndSameCoinForCompany()) {
            await $.post(
                '@Url.Action("GetCompanyMaxAndDeptByCoin", "CompanyCash")', {
                companyId: companyId,
                coinId: coinId
            }, function (data) {
                secoundCompanyBalcne = data;

                var total = parseFloat(data.Total);
                var status = "";
                if (total > 0) {
                    status = "له";
                }
                else if (total < 0) {
                    status = "عليه";
                }
                total = numberWithCommas(Math.abs(total));
                $('#secondcompanycurrentBalnce').text(total);
                $('#secondcopanynewBalnce').text(total);
                $('#secondcompanycurrentBalnceStatus').text(status);
                $('#secondcompanynewBalanceStatus').text(status);
            }
            )
        } else {
            var total = parseFloat($boxActionDto.SecondBalanceFeforeAction);
                var status = "";
                if (total > 0) {
                    status = "له";
                }
                else if (total < 0) {
                    status = "عليه";
                }
                total = numberWithCommas(Math.abs(total));
                $('#secondcompanycurrentBalnce').text(total);
                $('#secondcopanynewBalnce').text(total);
                $('#secondcompanycurrentBalnceStatus').text(status);
                $('#secondcompanynewBalanceStatus').text(status);
        }
    }

    function initialSecoundCompanyBalcne(companyId, coinId) {
        $.post(
            '@Url.Action("GetCompanyMaxAndDeptByCoin", "CompanyCash")', {
            companyId: companyId,
            coinId: coinId
        }, function (data) {
            secoundCompanyBalcne = data;
        });
    }

    function resetAgentBlance() {
        $('#agentcurrentBalnce').empty();
        $('#agentnewBalnce').empty();
    }
    function resetCompanyBalnce() {
        $('#companycurrentBalnce').empty();
        $('#copanynewBalnce').empty();
    }

    function clacAgentCurrentBalcne() {
        var amount = parseFloat(deleteCommaFromNumber($('#amout').val()));
        if (isNaN(amount)) {
            amount = 0;
        }
        var typeOfAtionVal = $('#typeOfAction').val();
        if (!isSameFirstAccountAndSameCoinForClient()) {
            if (clientBalnae != null) {
                var total;
                if (typeOfAtionVal == 1) {
                    total = clientBalnae.Total + amount;
                } else {
                    total = clientBalnae.Total - amount;
                }
                var status = "";
                if (total > 0) {
                    status = "له";
                } else if (total < 0) {
                    status = "عليه";
                }
                total = Math.abs(total);
                total = numberWithCommas(total);

                $('#agentnewBalnce').text(total);
                $('#agentnewBalnceStatus').text(status);

            }
        } else {
             var total;
            if (typeOfAtionVal == 1) {
                total = $boxActionDto.FirstBalanceFeforeAction + amount;
                } else {
                    total = $boxActionDto.FirstBalanceFeforeAction - amount;
                }
                var status = "";
                if (total > 0) {
                    status = "له";
                } else if (total < 0) {
                    status = "عليه";
                }
                total = Math.abs(total);
                total = numberWithCommas(total);

                $('#agentnewBalnce').text(total);
                $('#agentnewBalnceStatus').text(status);
        }
    }

    function calcCompanyCurrentBalnce() {
        var amount = parseFloat(deleteCommaFromNumber($('#amout').val()));
        if (isNaN(amount)) {
            amount = 0;
        }
        var typeOfAtionVal = $('#typeOfAction').val();
        if (!isSameFirstAccountAndSameCoinForCompany()) {
            if (companyBalnce != null) {
                var total = 0;
                if (typeOfAtionVal == 1) {
                    total = parseFloat(companyBalnce.Total) + amount;
                } else {
                    total = parseFloat(companyBalnce.Total) - amount;
                }
                var status = "";
                if (total > 0) {
                    status = "له";
                }
                else if (total < 0) {
                    status = "عليه";
                }
                total = numberWithCommas(Math.abs(total));
                $('#copanynewBalnce').text(total);
                $('#companynewBalanceStatus').text(status);
            }
        } else {
            var total = 0;
                if (typeOfAtionVal == 1) {
                    total = $boxActionDto.FirstBalanceFeforeAction + amount;
                } else {
                    total = $boxActionDto.FirstBalanceFeforeAction - amount;
                }
                var status = "";
                if (total > 0) {
                    status = "له";
                }
                else if (total < 0) {
                    status = "عليه";
                }
                total = numberWithCommas(Math.abs(total));
                $('#copanynewBalnce').text(total);
                $('#companynewBalanceStatus').text(status);
        }
    }

    function validate() {
        var firstAcountType = $('#firstAcountSelect').val();
        var secoundAcountType = $('#secoundAcount').val();
        if (firstAcountType == 3) {
            if ($('#agents').val() == "") {
                toastr["error"]("يجب عليك ان تحدد العميل", "خطاْ");
                return false;
            }
        }
        if (firstAcountType == 4) {
            if ($('#companies').val() == "") {
                toastr["error"]("يجب عليك ان تحدد الشركة", "خطاء");
                return false;
            }
        }
        var amount = $('#amout').val();
        if (amount == "" || amount == 0) {
            toastr["error"]("يجب عليك ان تحدد المبلغ", "خطاْ");
            return false;
        }
        if (secoundAcountType == 2) {
            if ($('#secoundAgentSelect').val() == null) {
                toastr["error"]("يجب عليك ان تحدد عميل جهة الصرف", "خطاْ");
                return false;
            }
        }
        if (secoundAcountType == 3) {
            if ($('#secoundCompanySelect').val() == null) {
                toastr["error"]("يجب عليك ان تحدد شركة جهة الصرف", "خطاْ");
                return false;
            }
        }
        return true;
    }

    function payExpenciveFromMainBox(publicExpenses, coinId, amount, note){
        $.post(
            '@Url.Action("EditPayExpenciveFromMainBox", "BoxAction")', {
                ExpensiveId: publicExpenses,
                CoinId: coinId,
                Amount: amount,
                Note: note,
                MoneyActionId: $boxActionDto.MoneyActionId
            }, function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدثت مشكلة اثناء الحفظ");
                }

            }
        );
    }

    function reciverIncomeToMainBox(publicIncomeId, coinId, amount, note) {
        $.post(
            '@Url.Action("EditReciverIncomeToMainBox", "BoxAction")', {
                IncomeId: publicIncomeId,
                CoinId: coinId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            }, function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدثت مشكلة اثناء الحفظ");
                }

            }
        );
    }

    function payForClientFromMainBox(clientId, coinId, amount, note) {
        $.post(
            '@Url.Action("EditPayForClientFromMainBox", "BoxAction")', {
                ClientId: clientId,
                CoinId: coinId,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Amount: amount,
                Note: note
            }, function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدثت مشكلة اثناء الحفظ");
                }
            });
    }

    function reciveFromClientToMainBox(clientId, coinId, amount, note) {
        $.post(
            '@Url.Action("EditReciveFromClientToMainBox", "BoxAction")', {
                ClientId: clientId,
                CoinId: coinId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            }, function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدثت مشكلة اثناء الحفظ");
                }
            });
    }

    function payForCompanyFromMainBox(companyId, coinId, amount, not) {

        $.post(
            '@Url.Action("EditPayForCompanyFromMainBox", "BoxAction")'
            , {
                CompanyId: companyId,
                CoinId: coinId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: not
            }
            , function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدثت مشكلة اثناء الحفظ");
                }
            });
    }

    function reciveFromCompanyToMainBox(companyId, coinId, amount, note) {
        $.post(
            '@Url.Action("EditReciveFromCompanyToMainBox", "BoxAction")', {
                CompanyId: companyId,
                CoinId: coinId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            }, function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدثت مشكلة اثناء الحفظ");
                }
            }
        );
    }

    function fromClientToClient(agentId, clientSecondAcount, coinId, amount, note) {

        $.post(
            '@Url.Action("EditFromClientToClient", "BoxAction")', {
                FirstClientId: agentId,
                SecondClientId: clientSecondAcount,
                CoinId: coinId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note,
            },
            function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحاولة ", "");
                    emptyForm();
                }
            }
        );
    }

    function fromCompanyToClient(companyId, clientSecondAcount, coinId, amount, note) {
        $.post(
            '@Url.Action("EditFromCompanyToClient", "BoxAction")', {
                CompanyId: companyId,
                ClientId: clientSecondAcount,
                CoinId: coinId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            }, function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                }
            }
        );
    }

    function fromClientToCompany(agentId, secoundCompanyId, coinId, amount, note) {
        $.post(
            '@Url.Action("EditFromClientToCompany", "BoxAction")', {
                ClientId: agentId,
                CompanyId: secoundCompanyId,
                CoinId: coinId,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Amount: amount,
                Note: note
            },
            function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                }
            }
        );
    }

    function fromCompanyToCompany(companyId, secondCompanyId, coinId, amount, note) {
        if (secondCompanyId == undefined || secondCompanyId=="")
            return;
                $.post(
                    '@Url.Action("EditFromCompanyToCompany", "BoxAction")', {
                        FirstCompanyId: companyId,
                        SecondCompanyId: secondCompanyId,
                        CoinId: coinId,
                        Amount: amount,
                        MoneyActionId: $boxActionDto.MoneyActionId,
                        Note: note
                    },
                    function (data) {
                        if (data.Success) {
                            toastr["success"]("تم");
                            emptyForm();
                        } else {
                            toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                        }
                    }
                )
    }

    function fromClientToPublicExpenes(coinId, clientId, publicExpenseId, amount, note) {
        $.post(
            '@Url.Action("EditFromClientToPublicExpenes", "BoxAction")', {
                CoinId: coinId,
                ClientId: clientId,
                PublicExpenseId: publicExpenseId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            },
            function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                }
            }
        );
    }

    function fromClientToPublicIncome(coinId, clientId, publicIncomeId, amount, note) {
        $.post(
            '@Url.Action("EditFromClientToPublicIncome", "BoxAction")', {
                CoinId: coinId,
                ClientId: clientId,
                PublicIncomeId: publicIncomeId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            },
            function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                }
            }
        );
    }

    function fromCompanyToPublicExpenes(coinId, companyId, publicExpenseId, amount, note) {
        $.post(
            '@Url.Action("EditFromCompanyToPublicExpenes", "BoxAction")', {
                CoinId: coinId,
                CompanyId: companyId,
                PublicExpenseId: publicExpenseId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            },
            function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                }
            }
        );
    }

    function fromCompanyToPublicIncome(coinId, companyId, publicIncomeId, amount, note) {

        $.post(
            '@Url.Action("EditFromCompanyToPublicIncome", "BoxAction")', {
                CoinId: coinId,
                CompanyId:companyId,
                PublicIncomeId: publicIncomeId,
                Amount: amount,
                MoneyActionId: $boxActionDto.MoneyActionId,
                Note: note
            },
            function (data) {
                if (data.Success) {
                    toastr["success"]("تم");
                    emptyForm();
                } else {
                    toastr["error"]("حدث خطاء ما الرجاء إعادة تحميل الصفحة و المحوالة من جديد");
                }
            }
        );
    }

    function getBoxAxtionById(id) {

        $.post(
            '@Url.Action("GetBoxActionForEdit", "BoxAction")',
            {
                moneyActionId: id,
            }, function (data) {
                $boxActionDto = data;
                console.log(data);
                initialElement();
            }
        );
    }

  async  function initialElement() {

        switch ($boxActionDto.BoxActionType) {
            case 'ExpenseFromTreasury': {
                displayAndHideElements({ firstAccount: 1, secoundAccount: 1, agent: 'none', expence: 'block', income: 'none', company: 'none', secondAccountDetial: 'none', secoundCompany: 'none', secondClient: 'none' });
                $('#publicExpenses').val($boxActionDto.ExpensiveId);

            } break;
            case 'ReceiveToTreasury': {
                displayAndHideElements({ firstAccount: 1, secoundAccount: 1, agent: 'none', expence: 'none', income: 'block', company: 'none', secondAccountDetial: 'none', secoundCompany: 'none', secondClient: 'none' });
                $('#publicIncomes').val($boxActionDto.IncomeId);

            } break;
            case 'ExpenseFromTreasuryToClient': {
                displayAndHideElements({ firstAccount: 3, secoundAccount: 1, agent: 'block', expence: 'none', income: 'none', company: 'none', secondAccountDetial: 'none', secoundCompany: 'none', secondClient: 'none' });
                $('#agents').val($boxActionDto.FirstClientId).trigger("change");

            } break;
            case 'ReceiveFromClientToTreasury': {
                displayAndHideElements({ firstAccount: 3, secoundAccount: 1, agent: 'block', expence: 'none', income: 'none', company: 'none', secondAccountDetial: 'none', secoundCompany: 'none', secondClient: 'none' });
                $('#agents').val($boxActionDto.FirstClientId).trigger("change");

            } break;
            case 'ReceiveFromCompanyToTreasury': {
                displayAndHideElements({ firstAccount: 4, secoundAccount: 1, agent: 'none', expence: 'none', income: 'none', company: 'block', secondAccountDetial: 'none', secoundCompany: 'none', secondClient: 'none' });
                $('#companies').val($boxActionDto.FirstCompanyId).trigger("change");

            } break;
            case 'ExpenseFromTreasuryToCompany': {
                displayAndHideElements({ firstAccount: 4, secoundAccount: 1, agent: 'none', expence: 'none', income: 'none', company: 'block', secondAccountDetial: 'none', secoundCompany: 'none', secondClient: 'none' });
                $('#companies').val($boxActionDto.FirstCompanyId).trigger("change");

            } break;

            case 'None': {
                if ($boxActionDto.FirstClientId != null && $boxActionDto.SecondClientId != null) {
                    
                    displayAndHideElements({ firstAccount: 3, secoundAccount: 2, agent: 'block', expence: 'none', income: 'none', company: 'none', secondAccountDetial: 'block', secoundCompany: 'none', secondClient: 'block' });
                    $('#agents').val($boxActionDto.FirstClientId).trigger("change");
                    await fillSecoundSelect();
                    $('#secoundAgentSelect').val($boxActionDto.SecondClientId).trigger("change");


                } else if ($boxActionDto.FirstClientId != null && $boxActionDto.SecondCompanyId != null) {
                    displayAndHideElements({ firstAccount: 3, secoundAccount: 3, agent: 'block', expence: 'none', income: 'none', company: 'none', secondAccountDetial: 'block', secoundCompany: 'block', secondClient: 'none' });
                    $('#agents').val($boxActionDto.FirstClientId).trigger("change");
                    await fillSecoundSelect();
                    $('#secoundCompanySelect').val($boxActionDto.SecondCompanyId).trigger("change");
                    

                } else if ($boxActionDto.FirstCompanyId != null && $boxActionDto.SecondCompanyId != null) {
                    displayAndHideElements({ firstAccount: 4, secoundAccount: 3, agent: 'none', expence: 'none', income: 'none', company: 'block', secondAccountDetial: 'block', secoundCompany: 'block', secondClient: 'none' });
                    $('#companies').val($boxActionDto.FirstCompanyId).trigger("change");
                    await fillSecoundSelect();
                    $('#secoundCompanySelect').val($boxActionDto.SecondCompanyId).trigger("change");
                } else if ($boxActionDto.FirstCompanyId != null && $boxActionDto.SecondClientId != null) {
                    displayAndHideElements({ firstAccount: 4, secoundAccount: 2, agent: 'none', expence: 'none', income: 'none', company: 'block', secondAccountDetial: 'block', secoundCompany: 'none', secondClient: 'block' });
                    $('#companies').val($boxActionDto.FirstCompanyId).trigger("change");
                    await fillSecoundSelect();
                    $('#secoundAgentSelect').val($boxActionDto.SecondClientId).trigger("change");
                }

            } break;
            case 'ExpenseFromClientToPublic': {
                displayAndHideElements({ firstAccount: 1, secoundAccount: 2, agent: 'none', expence: 'block', income: 'none', company: 'none', secondAccountDetial: 'block', secoundCompany: 'none', secondClient: 'block' });
                $('#publicExpenses').val($boxActionDto.ExpensiveId);
                await fillSecoundSelect();
                $('#secoundAgentSelect').val($boxActionDto.SecondClientId).trigger("change"); 

            } break;
            case 'ReceiveFromPublicToClient': {
                displayAndHideElements({ firstAccount: 1, secoundAccount: 2, agent: 'none', expence: 'none', income: 'block', company: 'none', secondAccountDetial: 'block', secoundCompany: 'none', secondClient: 'block' });
                $('#publicIncomes').val($boxActionDto.IncomeId);
                await fillSecoundSelect();
                $('#secoundAgentSelect').val($boxActionDto.SecondClientId).trigger("change");

            } break;
            case 'ExpenseFromCompanyToPublic': {
                displayAndHideElements({ firstAccount: 1, secoundAccount: 3, agent: 'none', expence: 'block', income: 'none', company: 'none', secondAccountDetial: 'block', secoundCompany: 'block', secondClient: 'none' });
                $('#publicExpenses').val($boxActionDto.ExpensiveId);
                await fillSecoundSelect();
                $('#secoundCompanySelect').val($boxActionDto.SecondCompanyId).trigger("change");

            } break;
            case 'ReceiveFromPublicToCompany': {
                displayAndHideElements({ firstAccount: 1, secoundAccount: 3, agent: 'none', expence: 'none', income: 'block', company: 'none', secondAccountDetial: 'block', secoundCompany: 'block', secondClient: 'none' });
                $('#publicIncomes').val($boxActionDto.IncomeId);
                await fillSecoundSelect();
                $('#secoundCompanySelect').val($boxActionDto.SecondCompanyId).trigger("change");
                
            } break;
        }

    } 
    function displayAndHideElements(data) {

        $boxActionDto.Amount = Math.abs($boxActionDto.Amount);
        $('#coins').val($boxActionDto.CoinId);
        $('#firstAcountSelect').val(data.firstAccount);
        $('#secoundAcount').val(data.secoundAccount);
        var typeOfAction = $boxActionDto.IsIncome ? 1 : -1;
        $('#typeOfAction').val(typeOfAction);
        $('#note').val($boxActionDto.Note);
        $('#amout').val(numberWithCommas($boxActionDto.Amount));
        
        oldAmount = numberWithCommas($boxActionDto.Amount);

        $('#agentDiv').css('display', data.agent);
        $('#ExpencesDiv').css('display', data.expence);
        $('#incominingDiv').css('display', data.income);
        $('#companyDiv').css('display', data.company);
        $('#secounAcountDetials').css('display', data.secondAccountDetial);
        $('#secoundCompanyDiv').css('display', data.secoundCompany);
        $('#secoundAgentDiv').css('display', data.secondClient);
        $('#amout').keyup();
    }

    function displayAndHideElementsForCleaning() {

        $('#coins').val($boxActionDto.CoinId);
        var typeOfAction = $boxActionDto.IsIncome ? 1 : -1;
        $('#typeOfAction').val(typeOfAction);
        $('#note').val($boxActionDto.Note);
        $('#amout').val(numberWithCommas($boxActionDto.Amount));

        $('#ExpencesDiv').css('display', 'none');
        $('#incominingDiv').css('display', 'none');

        if ($boxActionDto.FirstCompanyId != null) {
            $('#firstAcountSelect').val(4);
            $('#companies').val($boxActionDto.FirstCompanyId).trigger("change");
            $('#agentDiv').css('display', 'block');
            $('#companyDiv').css('display', 'none');
        } else if ($boxActionDto.FirstClientId != null) {
            $('#firstAcountSelect').val(3);
            $('#agents').val($boxActionDto.FirstClientId).trigger("change");
            $('#agentDiv').css('display', 'none');
            $('#companyDiv').css('display', 'block');
        }

        if ($boxActionDto.SecondCompanyId != null) {
            $('#secoundAcount').val(3);
            $('#secoundCompanyDiv').css('display', 'block');
            $('#secoundAgentDiv').css('display', 'none');
            $('#secoundCompanySelect').val($boxActionDto.SecondCompanyId).trigger("change");
        } else if ($boxActionDto.SecondClientId != null) {
            $('#secoundAcount').val(2);
            $('#secoundCompanyDiv').css('display', 'none');
            $('#secoundAgentDiv').css('display', 'block');
            $('#secoundAgentSelect').val($boxActionDto.SecondClientId).trigger("change");
        }
    }
    $('#delete').click(function () {
        $.post(
            '/MoneyAction/DeleteMoenyAction', {
                id:'@ViewBag.MoneyActionId'
        },
            function (data) {
                alert('تم الحذف');
                window.location.replace(document.referrer);
            }
        )
    });

    function calcSecoundAgentCurrentBalcne() {
        var amount = parseFloat(deleteCommaFromNumber($('#amout').val()));
        if (isNaN(amount)) {
            amount = 0;
        }
        var typeOfAtionVal = $('#typeOfAction').val();
        if (!isSameSecAccountAndSameCoinForClient()) {
            if (secoundClientBalnce != null) {
                var total;
                if (typeOfAtionVal != 1) {
                    total = secoundClientBalnce.Total + amount;
                } else {
                    total = secoundClientBalnce.Total - amount;
                }
                var status = "";
                if (total > 0) {
                    status = "له";
                } else if (total < 0) {
                    status = "عليه";
                }
                total = Math.abs(total);
                total = numberWithCommas(total);

                $('#secoundagentnewBalnce').text(total);
                $('#secoundagentnewBalnceStatus').text(status);
            }
        } else {
            var total;
            if (typeOfAtionVal != 1) {
                total = $boxActionDto.SecondBalanceFeforeAction + amount;
                } else {
                    total = $boxActionDto.SecondBalanceFeforeAction - amount;
                }
                var status = "";
                if (total > 0) {
                    status = "له";
                } else if (total < 0) {
                    status = "عليه";
                }
                total = Math.abs(total);
                total = numberWithCommas(total);

                $('#secoundagentnewBalnce').text(total);
                $('#secoundagentnewBalnceStatus').text(status);
        }
    }


    function calcSecoundCompanyCurrentBalance() {
        var amount = parseFloat(deleteCommaFromNumber($('#amout').val()));
        if (isNaN(amount)) {
            amount = 0;
        }

        var typeOfAtionVal = $('#typeOfAction').val();
        if (!isSameSecAccountAndSameCoinForCompany()&&secoundCompanyBalcne!=null) {
            var total = 0;
            if (typeOfAtionVal != 1) {
                total = parseFloat(secoundCompanyBalcne.Total) + amount;
            } else {
                total = parseFloat(secoundCompanyBalcne.Total) - amount;
            }
            var status = "";
            if (total > 0) {
                status = "له";
            }
            else if (total < 0) {
                status = "عليه";
            }
            total = numberWithCommas(Math.abs(total));
            $('#secondcopanynewBalnce').text(total);
            $('#secondcompanynewBalanceStatus').text(status);
        }
        else {
            var total = 0;
            if (typeOfAtionVal != 1) {
                total = parseFloat($boxActionDto.SecondBalanceFeforeAction) + amount;
            } else {
                total = parseFloat($boxActionDto.SecondBalanceFeforeAction) - amount;
            }
            var status = "";
            if (total > 0) {
                status = "له";
            }
            else if (total < 0) {
                status = "عليه";
            }
            total = numberWithCommas(Math.abs(total));
            $('#secondcopanynewBalnce').text(total);
            $('#secondcompanynewBalanceStatus').text(status);
        }
    }

    function calcAllFirstBalance() {
        var type = $('#firstAcountSelect').val();
        if (type == 3) {
            clacAgentCurrentBalcne();
        } else if (type == 4) {

            calcCompanyCurrentBalnce();
        }
    }
    function calcAllSecoundBalances() {
        var type = $('#secoundAcount').val();
        if (type == 2) {
            calcSecoundAgentCurrentBalcne();
        } else if (type == 3) {
            calcSecoundCompanyCurrentBalance();
        }
    }
    function resetSecoundCompanyBalnace() {
        $('#secondcompanycurrentBalnce').empty();
        $('#secondcompanycurrentBalnceStatus').empty();
        $('#secondcopanynewBalnce').empty();
        $('#secondcompanynewBalanceStatus').empty();
    }
    function resetSecoundAgentBalcne() {
        $('#secoundagentnewBalnce').text('');
        $('#secoundagentcurrentBalnceStatus').text('');
        $('#secoundagentcurrentBalnce').text('');
        $('#secoundagentnewBalnceStatus').text('');
    }
    function isSameFirstAccountAndSameCoinForClient() {
        var coinId = $('#coins').val();
        if (coinId != $boxActionDto.CoinId)
            return false;
        if ($boxActionDto.FirstClientId != $('#agents').val())
            return false;
        return true;
    }
    function isSameFirstAccountAndSameCoinForCompany() {
        var coinId = $('#coins').val();
        if (coinId != $boxActionDto.CoinId)
            return false;
        if ($boxActionDto.FirstCompanyId != $('#companies').val())
            return false;
        return true;
    }
    function isSameSecAccountAndSameCoinForClient() {
        if ($boxActionDto.SecondClientId != $('#secoundAgentSelect').val())
            return false;
        if ($boxActionDto.CoinId != $('#coins').val())
            return false; 
        return true;
    }
    function isSameSecAccountAndSameCoinForCompany() {
        if ($boxActionDto.SecondCompanyId  != $('#secoundCompanySelect').val())
            return false;
        if ($boxActionDto.CoinId != $('#coins').val())
            return false; 
        return true;
    }
</script>